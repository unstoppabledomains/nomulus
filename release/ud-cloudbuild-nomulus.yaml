# To manually trigger a build on GCB, run:
# gcloud builds submit --config cloudbuild-nomulus.yaml --substitutions TAG_NAME=[TAG] ..
#
# To trigger a build automatically, follow the instructions below and add a trigger:
# https://cloud.google.com/cloud-build/docs/running-builds/automate-builds
steps:
# Create a directory to store the artifacts
- id: Create-Nomulus-Directory
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  args: ['mkdir', 'nomulus']
# Run tests
- id: Run-Tests
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  # Set home for Gradle caches. Must be consistent with last step below
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  args: ['./gradlew',
         'test',
         '-PskipDockerIncompatibleTests=true',
         '-PmavenUrl=https://repo.maven.apache.org/maven2',
         '-PpluginsUrl=https://plugins.gradle.org/m2'
  ]
# Replace secrets in config file
- id: Replace-Config-Secrets
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  args:
  - -c
  - |
    set -e
    # Access the OAuth client secret from Secret Manager
    OAUTH_SECRET=$(gcloud secrets versions access latest --secret="oauth-client-secret-nomulus-${_ENV}-desktop")
    
    # Replace the placeholder in the config file
    sed -i "s/{OAUTH_CLIENT_SECRET}/$${OAUTH_SECRET}/g" \
      core/src/main/java/google/registry/config/files/nomulus-config-${_ENV}.yaml
# Build and package the deployment files for each environment, and the tool
# binary and image.
- id: Build-Deployment-Files
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  # Set home for Gradle caches. Must be consistent with last step below
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  entrypoint: /bin/bash
  args:
  - -c
  - |
    for _env in tool crash
    do
      release/build_nomulus_for_env.sh $${_env} output
    done
# Save TAG_NAME in ./output/tag_name, to be uploaded later. This file is purely
# informational. It makes it easier to tell the tag of the current 'live' release.
- id: Save-Tag-Name
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  args: [ '-c', 'echo ${COMMIT_SHA} > output/tag_name' ]
# Build Nomulus, tool and proxy image, them upload them to GCR.
- id: Build-Nomulus-Tool-Image-And-Push
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  # Set home for Gradle caches. Must be consistent with last step below
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  entrypoint: /bin/bash
  args:
  - -c
  - |
    ./gradlew :jetty:buildNomulusImage :proxy:buildProxyImage :core:buildToolImage\
      -PmavenUrl=https://repo.maven.apache.org/maven2 \
      -PpluginsUrl=https://plugins.gradle.org/m2
    docker tag nomulus $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:${COMMIT_SHA}
    docker tag nomulus $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:latest
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:${COMMIT_SHA}
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:latest
    docker tag proxy $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:${COMMIT_SHA}
    docker tag proxy $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:latest
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:${COMMIT_SHA}
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:latest
    docker tag nomulus-tool $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:${COMMIT_SHA}
    docker tag nomulus-tool $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:latest
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:${COMMIT_SHA}
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:latest
# Get the tool image digest and substitute in the digest in other GCB files.
- id: Get-And-Replace-Tool-Digest
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  args:
  - -c
  - |
    set -e
    digest=$(gcloud container images list-tags $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool \
      --format="get(digest)" --filter="tags = ${COMMIT_SHA}")
    # schema-deploy and schema-verify scripts
    sed -i s/nomulus-tool:latest/nomulus-tool@$digest/g release/cloudbuild-schema-*.yaml
# Build and upload the prober_cert_updater image. This image extends from the `builder` and the
# nomulus.jar built earlier.
# - id: Build-Prober-Cert-Updater-Image-And-Push
#   name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
#   entrypoint: /bin/bash
#   args:
#   - -c
#   - |
#     set -e
#     # The nomulus jar is not under the working dir. Must be copied over. 
#     cp ../../output/nomulus.jar .
#     docker build -t $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/prober_cert_updater:${COMMIT_SHA} \
#       --build-arg TAG_NAME=${COMMIT_SHA} --build-arg PROJECT_ID=${PROJECT_ID} .
#     docker tag $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/prober_cert_updater:${COMMIT_SHA} \
#       $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/prober_cert_updater:latest
#     docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/prober_cert_updater:${COMMIT_SHA}
#     docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/prober_cert_updater:latest
#   dir: 'release/prober-cert-updater/'
# Build and upload the db_object_updater image. This image extends from the `builder` and the
# nomulus.jar built earlier.
# - id: Build-DB-Object-Updater-Image-And-Push
#   name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
#   entrypoint: /bin/bash
#   args:
#   - -c
#   - |
#     set -e
#     # The nomulus jar is not under the working dir. Must be copied over. 
#     cp ../../output/nomulus.jar .
#     docker build -t $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/db_object_updater:${COMMIT_SHA} \
#       --build-arg TAG_NAME=${COMMIT_SHA} --build-arg PROJECT_ID=${PROJECT_ID} --build-arg GCR_HOSTNAME=$_GCR_HOSTNAME .
#     docker tag $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/db_object_updater:${COMMIT_SHA} \
#       $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/db_object_updater:latest
#     docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/db_object_updater:${COMMIT_SHA}
#     docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/db_object_updater:latest
#   dir: 'release/db-object-updater/'
# # Build and stage Dataflow Flex templates.
# - name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
#   entrypoint: /bin/bash
#   # Set home for Gradle caches. Must be consistent with the previous steps above
#   # and ./build_nomulus_for_env.sh
#   env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
#   args:
#   - -c
#   - |
#     ./release/stage_beam_pipeline.sh \
#       beamPipelineCommon \
#       beam_pipeline_common \
#       ${COMMIT_SHA} \
#       ${PROJECT_ID} \
#       google.registry.beam.spec11.Spec11Pipeline \
#       google/registry/beam/spec11_pipeline_metadata.json \
#       google.registry.beam.billing.InvoicingPipeline \
#       google/registry/beam/invoicing_pipeline_metadata.json \
#       google.registry.beam.billing.ExpandBillingRecurrencesPipeline \
#       google/registry/beam/expand_billing_recurrences_pipeline_metadata.json \
#       google.registry.beam.rde.RdePipeline \
#       google/registry/beam/rde_pipeline_metadata.json \
#       google.registry.beam.resave.ResaveAllEppResourcesPipeline \
#       google/registry/beam/resave_all_epp_resources_pipeline_metadata.json \
#       google.registry.beam.wipeout.WipeOutContactHistoryPiiPipeline \
#       google/registry/beam/wipe_out_contact_history_pii_pipeline_metadata.json
# Tentatively build and publish Cloud SQL schema jar here, before the schema release process is
# finalized. Also publish nomulus:core jars that are needed for server/schema compatibility tests.
- id: Build-And-Publish-Schema-Jar
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  # Set home for Gradle caches. Must be consistent with previous steps above
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  args:
  - -c
  - |
    set -e
    ./gradlew \
      :db:publish \
      -PmavenUrl=https://repo.maven.apache.org/maven2 \
      -PpluginsUrl=https://plugins.gradle.org/m2 \
      -Ppublish_repo=gcs://${PROJECT_ID}-deployed-tags/maven \
      -Pschema_version=${COMMIT_SHA}
    ./gradlew \
      :core:publish \
      -PmavenUrl=https://repo.maven.apache.org/maven2 \
      -PpluginsUrl=https://plugins.gradle.org/m2 \
      -Ppublish_repo=gcs://${PROJECT_ID}-deployed-tags/maven \
      -Pnomulus_version=${COMMIT_SHA}
    # Upload schema jar for use by schema deployment.
    # TODO(weiminyu): consider using the jar in maven repo during deployment and
    # stop the  upload here.
    cp db/build/libs/schema.jar output/
# The tarballs and jars to upload to GCS.
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-deploy/${COMMIT_SHA}'
    paths:
    - 'output/*.tar'
    - 'output/tag_name'
    - 'output/nomulus.jar'
    - 'output/schema.jar'
    - 'core/src/main/java/google/registry/config/files/nomulus-config-*.yaml'
    - 'core/src/main/java/google/registry/config/files/cloud-tasks-queue.xml'
    - 'core/src/main/java/google/registry/config/files/tasks/cloud-scheduler-tasks-*.xml'
    - 'release/cloudbuild-sync-and-tag.yaml'
    - 'release/cloudbuild-deploy-*.yaml'
    - 'release/cloudbuild-delete-*.yaml'
    # - 'release/cloudbuild-schema-deploy-*.yaml'
    # - 'release/cloudbuild-schema-verify-*.yaml'
    # - 'release/cloudbuild-restart-proxies-*.yaml'
    - 'jetty/kubernetes/*.yaml'
    - 'jetty/kubernetes/gateway/*.yaml'
# The images are already uploaded, but we still need to include them there so that
# the GCB pubsub message contains them (for Spinnaker to consume).
# images:
#   - '$_GCR_HOSTNAME/$PROJECT_ID/nomulus/builder:${COMMIT_SHA}'
#   - '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:${COMMIT_SHA}'
#   - '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:${COMMIT_SHA}'
timeout: 7200s
options:
  machineType: 'E2_HIGHCPU_32'

substitutions:
  _ENV: crash
  _GCR_HOSTNAME: us-central1-docker.pkg.dev
  _GCS_STORAGE_BUCKET_FOR_CLOUDBUILD: "ud-registry-crash-nomulus-deploy-cloudbuild-logs"

logsBucket: "$_GCS_STORAGE_BUCKET_FOR_CLOUDBUILD"