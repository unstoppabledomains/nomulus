# To manually trigger a build on GCB, run:
# gcloud builds submit --config cloudbuild-nomulus.yaml --substitutions TAG_NAME=[TAG] ..
#
# To trigger a build automatically, follow the instructions below and add a trigger:
# https://cloud.google.com/cloud-build/docs/running-builds/automate-builds
steps:
# Check the out internal repo. 
- id: Clone-Internal-Repo
  name: 'gcr.io/cloud-builders/git'
  entrypoint: /bin/bash
  secretEnv:
    - GITHUB_OAUTH_TOKEN
  args:
  - -c
  - |
    set -e
    git config --global credential.helper store
    echo "https://oauth2:$$GITHUB_OAUTH_TOKEN@github.com" > ~/.git-credentials
    git clone https://github.com/unstoppabledomains/nomulus-secrets.git nomulus-internal
# Merge the repos. 
- id: Merge-Internal-Repo
  name: 'gcr.io/cloud-builders/git'
  entrypoint: /bin/bash
  args:
  - -c
  - |
    set -e
    shopt -s dotglob
    rm -rf .git && rm -rf nomulus-internal/.git
    cp -rf nomulus-internal/* .
    rm -rf nomulus-internal
# Create a directory to store the artifacts
- id: Create-Nomulus-Directory
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  args: ['mkdir', 'nomulus']
# Run tests
- id: Run-Tests
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  # Set home for Gradle caches. Must be consistent with last step below
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  args: ['./gradlew',
         'test',
         '-PskipDockerIncompatibleTests=true',
         '-PmavenUrl=https://repo.maven.apache.org/maven2',
         '-PpluginsUrl=https://plugins.gradle.org/m2'
  ]
# Replace secrets in config file
- id: Replace-Config-Secrets
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  args:
  - -c
  - |
    set -e
    # Access secrets from Secret Manager
    POWER_DNS_BASE_URL=$(gcloud secrets versions access latest --secret="power-dns-base-url")
    POWER_DNS_API_KEY=$(gcloud secrets versions access latest --secret="power-dns-api-key")
    OAUTH_CLIENT_ID=$(gcloud secrets versions access latest --secret="oauth-client-id-nomulus-${_ENV}-desktop")
    OAUTH_SECRET=$(gcloud secrets versions access latest --secret="oauth-client-secret-nomulus-${_ENV}-desktop")
    CLOUD_SQL_INSTANCE_CONNECTION_NAME=$(gcloud secrets versions access latest --secret="keyring-sql-primary-conn-name")
  
    # Replace the placeholders in the config file
    sed -i "s|{POWER_DNS_BASE_URL}|$${POWER_DNS_BASE_URL}|g" \
      core/src/main/java/google/registry/config/files/power-dns/env-${_ENV}.yaml
    sed -i "s|{POWER_DNS_API_KEY}|$${POWER_DNS_API_KEY}|g" \
      core/src/main/java/google/registry/config/files/power-dns/env-${_ENV}.yaml
    sed -i "s|{CLOUD_SQL_INSTANCE_CONNECTION_NAME}|$${CLOUD_SQL_INSTANCE_CONNECTION_NAME}|g" \
      core/src/main/java/google/registry/config/files/nomulus-config-${_ENV}.yaml
    sed -i "s|{OAUTH_CLIENT_ID}|$${OAUTH_CLIENT_ID}|g" \
      core/src/main/java/google/registry/config/files/nomulus-config-${_ENV}.yaml
    sed -i "s/{OAUTH_CLIENT_SECRET}/$${OAUTH_SECRET}/g" \
      core/src/main/java/google/registry/config/files/nomulus-config-${_ENV}.yaml
# Build and package the deployment files for each environment, and the tool
# binary and image.
- id: Build-Deployment-Files
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  # Set home for Gradle caches. Must be consistent with last step below
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  entrypoint: /bin/bash
  args:
  - -c
  - |
    for _env in tool crash
    do
      release/build_nomulus_for_env.sh $${_env} output
    done
# Save TAG_NAME in ./output/tag_name, to be uploaded later. This file is purely
# informational. It makes it easier to tell the tag of the current 'live' release.
- id: Save-Tag-Name
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  args: [ '-c', 'echo ${COMMIT_SHA} > output/tag_name' ]
# Build Nomulus, tool and proxy image, them upload them to GCR.
- id: Build-Nomulus-Tool-Image-And-Push
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  # Set home for Gradle caches. Must be consistent with last step below
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  entrypoint: /bin/bash
  args:
  - -c
  - |
    ./gradlew :jetty:buildNomulusImage :proxy:buildProxyImage :core:buildToolImage\
      -PmavenUrl=https://repo.maven.apache.org/maven2 \
      -PpluginsUrl=https://plugins.gradle.org/m2
    docker tag nomulus $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:${COMMIT_SHA}
    docker tag nomulus $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:latest
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:${COMMIT_SHA}
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus:latest
    docker tag proxy $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:${COMMIT_SHA}
    docker tag proxy $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:latest
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:${COMMIT_SHA}
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/proxy:latest
    docker tag nomulus-tool $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:${COMMIT_SHA}
    docker tag nomulus-tool $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:latest
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:${COMMIT_SHA}
    docker push $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool:latest
# Get the tool image digest and substitute in the digest in other GCB files.
- id: Get-And-Replace-Tool-Digest
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  args:
  - -c
  - |
    set -e
    digest=$(gcloud container images list-tags $_GCR_HOSTNAME/${PROJECT_ID}/nomulus/nomulus-tool \
      --format="get(digest)" --filter="tags = ${COMMIT_SHA}")
    # schema-deploy and schema-verify scripts
    sed -i s/nomulus-tool:latest/nomulus-tool@$digest/g release/cloudbuild-schema-*.yaml
# Tentatively build and publish Cloud SQL schema jar here, before the schema release process is
# finalized. Also publish nomulus:core jars that are needed for server/schema compatibility tests.
- id: Build-And-Publish-Schema-Jar
  name: '$_GCR_HOSTNAME/${PROJECT_ID}/nomulus/builder:latest'
  entrypoint: /bin/bash
  # Set home for Gradle caches. Must be consistent with previous steps above
  # and ./build_nomulus_for_env.sh
  env: [ 'GRADLE_USER_HOME=/workspace/cloudbuild-caches' ]
  args:
  - -c
  - |
    set -e
    ./gradlew \
      :db:publish \
      -PmavenUrl=https://repo.maven.apache.org/maven2 \
      -PpluginsUrl=https://plugins.gradle.org/m2 \
      -Ppublish_repo=gcs://${PROJECT_ID}-deployed-tags/maven \
      -Pschema_version=${COMMIT_SHA}
    ./gradlew \
      :core:publish \
      -PmavenUrl=https://repo.maven.apache.org/maven2 \
      -PpluginsUrl=https://plugins.gradle.org/m2 \
      -Ppublish_repo=gcs://${PROJECT_ID}-deployed-tags/maven \
      -Pnomulus_version=${COMMIT_SHA}
    # Upload schema jar for use by schema deployment.
    # TODO(weiminyu): consider using the jar in maven repo during deployment and
    # stop the  upload here.
    cp db/build/libs/schema.jar output/
# The tarballs and jars to upload to GCS.
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-deploy/${COMMIT_SHA}'
    paths:
    - 'output/*.tar'
    - 'output/tag_name'
    - 'output/nomulus.jar'
    - 'output/schema.jar'
    - 'core/src/main/java/google/registry/config/files/nomulus-config-*.yaml'
    - 'core/src/main/java/google/registry/config/files/cloud-tasks-queue.xml'
    - 'core/src/main/java/google/registry/config/files/tasks/cloud-scheduler-tasks-*.xml'
    - 'core/src/main/java/google/registry/config/files/power-dns/env-*.yaml'
    - 'release/cloudbuild-sync-and-tag.yaml'
    - 'release/cloudbuild-deploy-*.yaml'
    - 'release/cloudbuild-delete-*.yaml'
    - 'jetty/kubernetes/*.yaml'
    - 'jetty/kubernetes/gateway/*.yaml'
timeout: 7200s
options:
  pool:
    name: 'projects/${PROJECT_ID}/locations/us-central1/workerPools/cloudbuild-default'

substitutions:
  _ENV: crash
  _GCR_HOSTNAME: us-central1-docker.pkg.dev
  _GCS_STORAGE_BUCKET_FOR_CLOUDBUILD: "ud-registry-crash-nomulus-deploy-cloudbuild-logs"
  _GITHUB_TOKEN_SECRET_NAME: unstoppabledomains-org-github-oauthtoken-9b9658

logsBucket: "$_GCS_STORAGE_BUCKET_FOR_CLOUDBUILD"

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/${_GITHUB_TOKEN_SECRET_NAME}/versions/latest
    env: GITHUB_OAUTH_TOKEN
